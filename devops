#!/bin/bash

TIMESTAMP=$(date +"%s")
LOGS_DIR="logs"
ENABLE_LOG=yes

if [ ! -d "$LOGS_DIR" ]; then
    mkdir $LOGS_DIR
fi

LOGFILE="$LOGS_DIR/devops_${TIMESTAMP}.log"

if [[ "$*" == "" ]]; then
    ENABLE_LOG=no
else
    echo "LOGGING TO FILE: ${LOGFILE}"
fi

function lowercase() {
    echo "$1" | awk '{print tolower($0)}'
}

function LOG() {
    if [[ "$ENABLE_LOG" == "no" ]]; then
        echo "$*"
    else
        echo "$*">>"$LOGFILE"
    fi
}

#SLACK_WEBHOOK_URL="https://hooks.slack.com/services/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"
SLACK_CHANNEL="devops-builds"
#SLACK_USERNAME="devops"
SLACK_TOKEN="xoxp-161276080816-162664008390-195988130864-812196137553bc39e2524e23a602e8aa"
SLACK_UPLOAD_URL="https://slack.com/api/files.upload"

OS=$(lowercase "$(uname)")

INFO_CPU=""
INFO_MEM=""
INFO_OS="$(uname -srvmp)"
INFO_OS_SHORT="$(uname)"

if [[ "$OS" == "windowsnt" || "$OS" == *"mingw"* || "$OS" == *"cygwin"*  ]]; then
    INFO_CPU="$(grep "model name" /proc/cpuinfo | head -1 | awk -F ": " '{ print $2 }')"
    INFO_OS="${INFO_OS} - $(cmd /c ver)"
    INFO_MEM="$(free | awk '/^Mem:/{print $2}')"
elif [ "$OS" == "linux" ]; then
    INFO_CPU="$(grep "model name" /proc/cpuinfo | head -1 | awk -F ": " '{ print $2 }')"
    INFO_MEM="$(free | awk '/^Mem:/{print $2}')"
elif [ "$OS" == "darwin" ]; then
    INFO_CPU="$(sysctl -n machdep.cpu.brand_string)"
    INFO_MEM="$(system_profiler SPHardwareDataType | grep "  Memory:" | awk -F ": " '{ print $2 }')"
fi

TITLE="devops build by $(whoami) on $(date)"

if [[ "$ENABLE_LOG" == "no" ]]; then
    ./devops-cli "$@"
else

    LOG "User: $(whoami)"
    LOG "CPU: ${INFO_CPU}"
    LOG "MEM: ${INFO_MEM}"
    LOG "OS: ${INFO_OS}"
    LOG "CMD: ./devops $*"
    LOG "START: $(date)"
    LOG "=========================================="

    ./devops-cli "$@" | tee -ai "$LOGFILE"

    LOG "^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
    LOG "END: $(date)"
    LOG "=:SUMMARY:================================="
    LOG "$(grep -i error "${LOGFILE}")"

    ERRORS_COUNT=$(grep -ic error "${LOGFILE}")
    SUCCESS_COUNT=$(grep -c "failed=0" "${LOGFILE}")
    CHANGED_COUNT=$(grep -c "changed=" "${LOGFILE}")

    if [ ! -z "$CHANGED_COUNT" ]; then
        DEPLOY_STATUS="Success: ${SUCCESS_COUNT} of ${CHANGED_COUNT}; "
    fi


    if [ ! -z "$HUBOT_SLACK_TOKEN" ]; then
        #get bot info
        #https://slack.com/api/auth.test?token=
        BOT_API_URL="https://slack.com/api/auth.test?token=$HUBOT_SLACK_TOKEN"
        BOT_INFO="$(curl "$BOT_API_URL")"
        BOT_NAME="$(echo "$BOT_INFO" | sed -ne 's/.*"user":"\(.*\)","team.*/\1/p')"
        BOT_ID="$(echo "$BOT_INFO" | sed -ne 's/.*"user_id":"\(.*\)".*/\1/p')"
        USER_INFO="BOT: ${BOT_NAME}($BOT_ID); "
    else
        USER_INFO="USER: $(whoami); "
    fi

    INITIAL_COMMENT="${USER_INFO}Command: $*; ${DEPLOY_STATUS}OS: ${INFO_OS_SHORT}; Errors: ${ERRORS_COUNT}"

fi


if [[ "$ENABLE_LOG" == "no" ]]; then
    echo -e "\nNothing to send, not recording.\n"
else
    echo -e "Sending ${LOGFILE} to [${SLACK_CHANNEL}] channel in slack.\n\n"
    #send logfile to slack
    curl -F file=@"${LOGFILE}" -F channels="${SLACK_CHANNEL}" -F filetype=text -F title="${TITLE}" -F initial_comment="${INITIAL_COMMENT}" -F token="${SLACK_TOKEN}" "${SLACK_UPLOAD_URL}"
    echo -e "\n\nThanks!"
fi

#done
exit 0;

