#!/bin/bash

#read defaults before script starts
export DEFAULT_USER_PROFILE="$HOME/.bash_profile"
echo "DEFAULT_PROFILE_FILE=$DEFAULT_USER_PROFILE"
DIR_INC="$(pwd -P)/scripts"
echo "DIR_INC=$DIR_INC"
DIR_ROOT="$(pwd -P)"
echo "DIR_ROOT=$DIR_ROOT"
ACTION="$1"
ACTION_PARAMS="${*:2}"
echo "ACTION=${ACTION}"
echo "ACTION_PARAMS=${ACTION_PARAMS}"

source ./scripts/functions.sh

debug "OS=${OS}" "info"

#doProjectInstall(PROJECT_TITLE,PROJECT_DIR)
function doProjectInstall() {
    local PROJECT_TITLE=${1?Need project title}
    local PROJECT_DIR=${2?Need project path}

    debug "Installing $PROJECT_TITLE" "info"
    if [ -d "$PROJECT_DIR" ]; then
        cd "$PROJECT_DIR" && ./install && cd - || return
    else
        debug "Project $PROJECT_TITLE not found at location $PROJECT_DIR" "error"
    fi
}

function doDependencyInstall() {


    if [[ ! -z "$PYTHON_ENV" ]]; then

        local CHECK_PYCURL
        CHECK_PYCURL="$(python -c 'import pycurl; print(pycurl.version)' 2>&1 | grep PycURL)"

        if [[ -z "$CHECK_PYCURL" ]]; then
            debug "Making sure pycurl is installed" "info"
            #pip uninstall --yes pycurl
            export PYCURL_SSL_LIBRARY=${DEFAULT_SSL_LIBRARY}
            export LDFLAGS="-L${DEFAULT_SSL_PATH}/lib"
            export CPPFLAGS="-I${DEFAULT_SSL_PATH}/include"

            pip install --no-cache-dir --compile --ignore-installed --install-option="--with-openssl" pycurl
#            pip install pycurl
            local CHECK_PYCURL
            CHECK_PYCURL="$(python -c 'import pycurl; print(pycurl.version)' 2>&1)"
            if [[ "$CHECK_PYCURL" == *"Error"* ]]; then
                debug "PYCURL=$CHECK_PYCURL" "info"
                debug "PyCurl Not installed properly, aborting" "error"
                exit 1
            fi
        else
            debug "Pycurl is already installed" "info"
        fi

        local CHECK_ANSIBLE
        CHECK_ANSIBLE="$(which ansible 2>/dev/null)"
        if [[ -z "$CHECK_ANSIBLE" ]]; then
            debug "Making sure ansible is installed" "info"
            python -m pip install ansible paramiko PyYAML jinja2 httplib2 six docker-compose
            debug "ANSIBLE=$(ansible --version)" "info"
        else
            debug "Ansible is already installed" "info"
        fi

        debug "Installing dependencies for all projects" "info"
        if [ "$OS" == "windows"  ]; then #can't use maven for dependencies install
            debug "Installing dependencies directly" "info"
            doProjectInstall "VM" "$DIR_ROOT/$PROJECT_VM"
            doProjectInstall "ESB" "$DIR_ROOT/$PROJECT_ESB"
            doProjectInstall "DEPLOY" "$DIR_ROOT/$PROJECT_DEPLOY"
            doProjectInstall "PROTOTYPE" "$DIR_ROOT/$PROJECT_PROTOTYPE"
        else
            debug "Installing dependencies using Maven" "info"
            mvn verify -Pdependencies -DskipTests=true --settings default.xml
        fi
    fi


}

function doQuickstart() {

    debug ">>> AUTOMATED QUICKSTART <<<" "error"
    debug "Starting automated process for clean parent repo" "info"

    debug "NEXT STEPS: get all repos" "info"
    debug "./devops clone" "info"

    doTimeout 10

    #get the repos
    doReposClone

    debug "NEXT STEPS: install dependencies" "info"
    debug "./devops install" "info"

    doTimeout 10

    #install dependencies
    doDependencyInstall

    debug "NEXT STEPS: build local dev vm" "info"
    debug "./devops buildlocaldev" "info"

    doTimeout 10

    #build localdev vm
    doBuildLocalDev

}

function main {

    doPythonCheck

    if [[ $(isEmpty "$@") == true ]]; then
        displayLogo
        showLongHelp
        checkPreReqs
        showStatsInfo
    else

        local SCRIPTPARAMS
        SCRIPTPARAMS="$*"
        local FOUNDA=0
        local MENUCOUNT=0

        while [ "${MENULIST[MENUCOUNT]:-}" != "" ]
        do
            local TERM=(${MENULIST[MENUCOUNT]})

            if [[ "$SCRIPTPARAMS" == *"${TERM[0]}"* ]]; then
                local EXEC=${MENUCOMMAND[MENUCOUNT]}
                FOUNDA=1
                $EXEC
                break
            fi

            MENUCOUNT=$(( MENUCOUNT + 1 ))
        done

        if [ "$FOUNDA" == "0"  ]; then
            showLongHelp
        fi

    fi
    exit 0;
}

#start
main "$@";

exit 0;